/**
* @file Digi18.proto
*
* @Author Anton Niadbaila
* @Company Envinet GmbH
*
* Created on: 19.01.2018
* Update on: 02.01.2018
* V2 9.11.2020 : Removal of extensions in messages response and request,
*                Removal of ClimatisationInfo because not used,
*				         Including CurFilterNumber in DevicStatus
*/
syntax = "proto2";
// import option descriptor used to define our own options
import "google/protobuf/descriptor.proto";

package digi.pb;
option java_package = "net.envinet.cpu.commco.protocols.digitel";

///////////////////////////////////////////////////
// Protocol verson
///////////////////////////////////////////////////
enum constant {
  PROTOCOL_VERSION = 2;
}

///////////////////////////////////////////////////
// Define global units
///////////////////////////////////////////////////
enum Unit {
  NO_UNIT = 1;
  TIMESTAMP = 2; // number of milliseconds since 01/01/1970 00:00:00 in UTC
  SECOND = 3; // (s) seconds
  MINUTE = 4; // (min) minutes
  HOUR = 5; // (h) hours
  CELSIUS_DEGREE = 6; // (°C) temperature in Celsius scale
  KELVIN_DEGREE = 7; // (K) temperature in Kelvin scale
  HPA = 8; // (hPa) hectopascal, pressure and stress equal to 10² pascals
  KPA = 9; // (kPa) kilopascal, pressure and stress equal to 10³ pascals
  MBAR = 10; // (mbar) millibar exactly equal to 100 Pa
  L_MIN = 11; // (l/min) volumetric flow rate in litre per minute
  PERSENTAGE = 12; // (%) ratio expressed as a fraction of 100
  CUBIC_METER = 13; // (m³) volume of a cube with edges one metre in length
  CUBIC_METER_IN_STD = 14; // (Sm³) the volume at standard conditions
  DEGREE = 15; // (°) angle value
  BPS = 16; //  (bps) data-transfer rate bits per second
  MILLIMETER = 17; // (mm) unit of length in the metric system
  LITER = 18; // (l) liter, unit of volume equal to 1 cubic decimetre (dm3)
  B = 19; // byte
  KB = 20; // kilobyte
  MB = 21; // megabyte
}

///////////////////////////////////////////////////
// Define "unit" filed option
///////////////////////////////////////////////////

extend google.protobuf.FieldOptions {
  optional Unit unit = 50000;
}

///////////////////////////////////////////////////
// Constants and enums definition
///////////////////////////////////////////////////

enum ActionID {
  // status
  SAMPLER_STATUS = 1; // sampler status data
  LOG_MESSAGES = 2; // log messages
  SYS_INFO = 3; // system information
  CLIMATISATION_INFO = 4; // get climatisation device info
  USB_INFO = 5; // USB storage data

  // data
  CONFIGURATION = 6;// system configuration

  // commands
  PROGRAM_CMD = 7; // program command
  FILTER_CMD = 8; // filter change action
  USB_CMD = 9; // usb stick actions
  REPEAT = 10; // force sender to repeat last telegram (Request or Responce)
  TIME_SYNC = 11; // set Samler system time
}

///////////////////////////////////////////////////
// Common messages definition
///////////////////////////////////////////////////

message Program {
  repeated ProgramEntry entry = 1; //list of program sycles
  optional bool is_continius = 2; // if TRUE - the whole program (all cycles) will repeat until we have filters
}

// one cycle data
message ProgramEntry {
  optional uint32 wait_duration = 1 [(unit) = MINUTE]; // duration of WAIT step
  optional uint32 work_duration = 2 [(unit) = MINUTE]; // duration of WORK step
  optional uint32 pause_duration = 3 [(unit) = MINUTE]; // duration of PAUSE step
  optional uint32 number_of_runs = 4; // number of cycle repeats
  optional bool is_filter_change_required = 5; // if TRUE - change filter after cycle
}

message ConfigurationEntry {
  optional string name = 1; // parameter unuque name
  enum EntryType {
    INTEGER = 1;
    FLOAT = 2;
    STRING = 3;
    IP_ADDRESS = 4;
    BOOL = 5;
    TIMESTAMP = 6;
  }
  optional EntryType type = 2; // parameter type
  optional Unit unit = 3; // parameter unit
  optional string value = 4; // parameter value
}

///////////////////////////////////////////////////
// Request and assosiated messages definition
// direction: from Host to Sampler
///////////////////////////////////////////////////

message ProgramCmd {
  enum Type {
    START = 1; // start_at and is_prestart_filter should take in account
    FINISH = 2; // finish currently running program
    REQUEST = 3; // request program content from Sampler
    UPDATE = 4; // update program content on Sampler
  }
  optional Type type = 1; // type of command
  optional int64 start_at = 2  [(unit) = TIMESTAMP]; //a certain point in time to start program, if missing - immediately
  optional bool is_prestart_filter = 3; // if TRUE - the blower turns on and the inserted filter stays in the air flow until the starting time is reached
  optional Program program = 4; // program data
}

message FilterCmd {
  enum Type {
    CHANGE = 1; // change current filter
    DISCHARGE_MAGASINE = 2; // all filters from the left side magazine are changed through to the right side magazine.
  }
  optional Type type = 1; // type of command
}

message UsbCmd {
  enum Type {
    USB_SW_UPDATE = 1; // initiate SW update from USB stick
    USB_COPY_INT_MEM = 2; // copy internal memory
    USB_NEW_DATA = 3; // save new data from now
    USB_EJECT = 4; // safely eject USB stick
  }
  optional Type type = 1; // type of command
}

message UsbInfo {
  optional int64 total_memory_size = 1 [(unit) = B]; // USB storage size
  optional int64 log_file_size = 2 [(unit) = B]; // log file size
  optional int64 climate_file_size = 3 [(unit) = B]; //  temperature of filter storage and clima status file size
  optional int64 wind_file_size = 4 [(unit) = B]; //  wind data file size
}

message Request {
  optional ActionID action_id = 1;    // requested action ID

  //IDs from 1 to 9 reserved for telegram content
  //IDs from 9 to 64 reserved for telegram messages
  optional ProgramCmd program_cmd = 9; // action id = PROGRAM_CMD
  repeated ConfigurationEntry config_to_update = 10; // action id = CONFIGURATION
  optional FilterCmd filter_cmd = 11; // action id = FILTER_CMD
  optional UsbCmd usb_cmd = 12; // action id = USB_CMD
  optional int64 sys_time = 13 [(unit) = TIMESTAMP]; // action ID = TIME_SYNC
}

/////////////////////////////////////////////////
// Response and assosiated messages definition
// direction: from Sampler to Host
/////////////////////////////////////////////////

message ProgramRunInfo {
  optional uint32 current_cycle = 1; // number of current cycle
  optional uint32 total_n_of_cycles = 2; // total number of cycles
  optional bool is_continius_program = 3; // continuous program (cycles are repeated until magazine is empty)

  optional uint32 current_run = 4; // number of current cycle
  optional uint32 total_n_of_runs = 5; // total number of cycles

  optional uint32 estimated_time = 6 [(unit) = MINUTE];  // (WORK, WAIT or PAUSE) estimated time duration
  optional uint32 elapsed_time = 7 [(unit) = MINUTE];  // current state (WORK, WAIT or PAUSE) elapsed time duration
}


message FlowInfo {
  optional float temperature = 1 [(unit) = CELSIUS_DEGREE]; // current temperature
  optional float pressure = 2 [(unit) = HPA]; // air pressure
  optional float flow_rate = 3 [(unit) = L_MIN]; // flow rate
  optional bool is_estimated = 4; // if TRUE - estimated values instead of real are used
}

message DevicStatus {
  enum SamplerState {
    UNKNOWN = 1;   // Sample waiting configured time before start to WORK
    INITIALISATION = 2; // all systems, options (cartridge changer, external sensors) and output devices (e.g. USB, printer) are being checked
    WAIT = 3;   // Sample waiting configured time before start to WORK
    WORK = 4;   // Sampler do normal air pomping
    PAUSE = 5;  // Sample waiting configured time after finishing of WORK
    PROGRAM_EXPIRED = 6; // the flow through the filter is stopped and Sampler will stay in this state forewer
    START_AT = 7; // the HVS control waits in this operating state until the set start time has been reached
    PRE_START_FILTER_UNTIL = 8; // the blower is switched on and the inserted filter is flowed through until the set start time hasbeen reached. When the start time is reached, the filter data are put out and a filter change is performed
    FILTER_CHANGE_ACTIVE = 9; // the filter change is just being carried out

    ERROR = 15;  // Sample in error state
  }
  optional SamplerState device_state = 1; // carrent sampler status
  optional int64 timestamp = 2 [(unit) = TIMESTAMP];  // system timestamp
  optional FlowInfo internal_flow_info = 3;  //  internal flow meter statistics
  optional FlowInfo ambient_flow_info = 4;  //  ambient flow meter statistics, if not connected -  estimated values should be represented
  optional uint32 CurFilterNumber = 5;   //current filter number in sampling chamber
  optional ProgramRunInfo program_run_info = 6; // curent run info (together with program statistics)
  repeated Message new_log_messages = 7; // list of last unread messages
}

message Message {
  optional int64 timestamp = 1 [(unit) = TIMESTAMP]; // timestamp of message
  optional string text = 2; // log message text
  enum Type {
    INFO = 1;
    ERROR = 2;
  }
  optional Type type = 3; // log message type
}

message SystemInfo {
  optional string sw_version = 1; // Sampler software version
  optional uint32 pump_on_duration = 2 [(unit) = MINUTE]; // pumping time duration
  optional uint32 power_on_duration = 3 [(unit) = MINUTE]; // power on duration time

}

message CmdResult {
  enum Status {
    OK = 1; //success
    FAIL = 2; //fail
  }
  optional Status status = 1; // execution result
  repeated Message error_msg = 4; // error message(s) in case of unsuccessfull comand execution
}

message Response {
  optional ActionID action_id = 1;    // equested action ID
  optional CmdResult cmd_result = 2; // result of executed command

  //IDs from 1 to 9 reserved for telegram content
  //IDs from 9 to 64 reserved for  response messages
  optional DevicStatus device_status = 9; // action id = SAMPLER_STATUS
  repeated Message messages = 10; // action id = LOG_MESSAGES
  optional SystemInfo sys_info = 11; // action id = SYS_INFO
  repeated ConfigurationEntry all_config = 12; // action id = CONFIGURATION
  optional UsbInfo usb_info = 13; // action id = USB_INFO
  optional ProgramCmd program = 14; // action id = PROGRAM_CMD
}

/*TODO
* check temperature sensors (in configuration)
* check pressure sensors (in configuration)
* flow check
* Tightness Test
*
*    message MCalibrationCmd {
*    enum Type {
*         AMBIENT_AND_FILTER_TEMP = 1; //
*         STORAGE_TEMP = 2; //
*    }
*    optional Type type = 1; // type of command
* }
*
*/