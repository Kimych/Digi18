/**
* @file Digi18.proto
*
* @Author Anton Niadbaila
* @Company Envinet GmbH
*
* Created on: 19.01.2018
* Update on: 08.06.2021
*
* V8 08.06.2021 : NbOfFilterInMagazine field included into DeviceStatus message
* V7 02.06.2021 : Including: Set/Get FlowCmd, Set/Get InletHeating, Pump Capacity and ErrorCode in DeviceStatus,
*                 set filter changer to automatic mode remotely and magazine discharge:  included in FilterCmd
                  set pump control remotely:  included in PumpCmd
				  set/get filter ID: included in FilterID
* V6 21.05.2021 : remove unused items
* V5 02.02.2021 : fix timestamp type; and a lot of typos
* V4 10.12.2020 : Including SamplingTime in DeviceStatus
*                 Including Volume in FlowInfo
* V3  9.11.2020 : Removal of ClimatisationInfo because not used
*				  Including CurFilterNumber in DeviceStatus
* V2  6.11.2020 : Removal of extensions in messages response and request
*/
syntax = "proto2";
// import option descriptor used to define our own options
import "google/protobuf/descriptor.proto";

package digi.pb;
option java_package = "net.envinet.cpu.commco.protocols.digitel";

///////////////////////////////////////////////////
// Protocol version
///////////////////////////////////////////////////
enum constant {
  PROTOCOL_VERSION = 8;
}

///////////////////////////////////////////////////
// Define global units
///////////////////////////////////////////////////
enum Unit {
  NO_UNIT = 1;
  TIMESTAMP = 2; // number of milliseconds since 01/01/1970 00:00:00 in UTC
  SECOND = 3; // (s) seconds
  MINUTE = 4; // (min) minutes
  HOUR = 5; // (h) hours
  CELSIUS_DEGREE = 6; // (°C) temperature in Celsius scale
  KELVIN_DEGREE = 7; // (K) temperature in Kelvin scale
  HPA = 8; // (hPa) hectopascal, pressure and stress equal to 10² pascals
  KPA = 9; // (kPa) kilopascal, pressure and stress equal to 10³ pascals
  MBAR = 10; // (mbar) millibar exactly equal to 100 Pa
  L_MIN = 11; // (l/min) volumetric flow rate in litre per minute
  PERCENTAGE = 12; // (%) ratio expressed as a fraction of 100
  CUBIC_METER = 13; // (m³) volume of a cube with edges one metre in length
  CUBIC_METER_IN_STD = 14; // (Sm³) the volume at standard conditions
  DEGREE = 15; // (°) angle value
  BPS = 16; //  (bps) data-transfer rate bits per second
  MILLIMETER = 17; // (mm) unit of length in the metric system
  LITER = 18; // (l) liter, unit of volume equal to 1 cubic decimetre (dm3)
  B = 19; // byte
  KB = 20; // kilobyte
  MB = 21; // megabyte
}

///////////////////////////////////////////////////
// Define "unit" filed option
///////////////////////////////////////////////////

extend google.protobuf.FieldOptions {
  optional Unit unit = 50000;
}

///////////////////////////////////////////////////
// Constants and enums definition
///////////////////////////////////////////////////

enum ActionID {
  // status
  SAMPLER_STATUS = 1; // sampler status data
  LOG_MESSAGES = 2; // log messages
  SYS_INFO = 3; // system information
  // commands
  PROGRAM_CMD = 4; // program command
  FILTER_CMD = 5; // filter change action
  REPEAT = 6; // force sender to repeat last telegram (Request or Response)
  TIME_SYNC = 7; // set Sampler system time
  SET_FLOW = 8; // set flow rate
  GET_FLOW = 9;	// get flow rate
  SET_INLET_HEATING = 10; // set inlet heating settings
  GET_INLET_HEATING = 11; // get inlet heating settings
  PUMP_CMD = 12; // pump control action
  SET_FILTERID = 13; // set filter ID
  GET_FILTERID = 14; // get filter ID
}

///////////////////////////////////////////////////
// Common messages definition
///////////////////////////////////////////////////



///////////////////////////////////////////////////
// Request and associated messages definition
// direction: from Host to Sampler
///////////////////////////////////////////////////

message ProgramCmd {
  enum Type {
    START = 1; // start immediately
    FINISH = 2; // finish currently running program
  }
  optional Type type = 1; // type of command
}

message FilterID {
  optional uint32 CurrentFilterID = 1;		   //current filterID of the filter in the sampling chamber (read only)
  optional uint32 NextFilterID = 2;			   //filterID of the next filter in the magazine (lowest position in the magazine), read/write
  optional uint32 NbOfFilterInMagazine = 3;	   //number of filters in the left magazine, read/write
}

message FilterCmd {
  enum Type {
    CHANGE = 1;    // exchange filter
	AUTOMATIC = 2; // set filter changer to automatic mode if changer is switched off manually
	OFF = 3;       // interrupt current filter exchange and switch off filter changer
	DISCHARGE = 4; //discharge complete magazine
  }
  optional Type type = 1; // type of command
}

message PumpCmd {
  enum Type {
	AUTOMATIC = 1; // set pump control to automatic mode if pump is switched off manually
	OFF = 2;       // turn of the pump for service or test
  }
  optional Type type = 1; // type of command
}

message FlowCmd {
  optional float flow_rate = 1 [(unit) = L_MIN]; // flow rate
}

message InletHeatingCmd {
  enum Type {
    ON = 1; // inlet heating ON
    OFF = 2; // inlet heating OFF
  }
  optional Type type = 1; // type of command
  optional float set_temperature = 2 [(unit) = CELSIUS_DEGREE]; // set temperature from inlet heating
  optional float curr_temperature = 3 [(unit) = CELSIUS_DEGREE]; // current inlet temperature, measured from the sampler
}

message Request {
  optional ActionID action_id = 1;    // requested action ID

  //IDs from 1 to 9 reserved for telegram content
  //IDs from 9 to 64 reserved for telegram messages
  optional ProgramCmd program_cmd = 9; // action id = PROGRAM_CMD
  optional FilterCmd filter_cmd = 10; // action id = FILTER_CMD
  optional int64 sys_time = 11 [(unit) = TIMESTAMP]; // action ID = TIME_SYNC
  optional FlowCmd SetFlow = 12; // action ID = SET_FLOW
  optional InletHeatingCmd SetInletHeating = 13; // action ID = SET_INLET_HEATING
  optional PumpCmd pump_cmd = 14; // action id = PUMP_CMD
  optional FilterID SetFilterID = 15; // action ID = GET_FILTERID
}

/////////////////////////////////////////////////
// Response and associated messages definition
// direction: from Sampler to Host
/////////////////////////////////////////////////

message FlowInfo {
  optional float temperature = 1 [(unit) = CELSIUS_DEGREE]; // current temperature
  optional float pressure = 2 [(unit) = HPA]; // air pressure
  optional float flow_rate = 3 [(unit) = L_MIN]; // flow rate
  optional float volume = 4 [(unit) = LITER];  //volume
}

message DeviceStatus {
  enum SamplerState {
    UNKNOWN = 1;   // Sample waiting configured time before start to WORK
    INITIALISATION = 2; // all systems, options (cartridge changer, external sensors) and output devices (e.g. USB, printer) are being checked
    WORK = 3;   // Sampler do normal air pumping
    PROGRAM_EXPIRED = 4; // the flow through the filter is stopped and Sampler will stay in this state forever
    FILTER_CHANGE_ACTIVE = 5; // the filter change is just being carried out
    ERROR = 15;  // Sample in error state
  }
  optional SamplerState device_state = 1; // current sampler status
  optional int64 timestamp = 2 [(unit) = TIMESTAMP];  // system timestamp
  optional FlowInfo internal_flow_info = 3;  //  internal flow meter statistics
  optional FlowInfo ambient_flow_info = 4;  //  ambient flow meter statistics, if not connected -  estimated values should be represented
  optional uint32 CurFilterNumber = 5;   //current filter number in sampling chamber
  optional uint32 SamplingTime = 6 [(unit) = SECOND];	//current sampling time in [s]
  optional float PumpCapacity = 7 [(unit) = PERCENTAGE];  //current pump capacity in [%]
  optional uint32 NbOfFilterInMagazine = 8;
  optional int64 ErrorCode = 9;
  repeated Message new_log_messages = 10; // list of last unread messages
}

/*************** SIRA Sampler ErrorCode *********************

  Bit 63: filter changer jammed
  Bit 62: blower overload warning
  Bit 61: magazine empty
  Bit 60: filter changer manual mode
  Bit 59: blower overload program stop
  Bit 58: filter exchange not sucessful
  Bit 57: filter changer motor timeout
  Bit 56: - not used with SIRA configuration
  Bit 55: - not used with SIRA configuration
  Bit 54: - not used with SIRA configuration
  Bit 53: - not used with SIRA configuration
  Bit 52: - not used with SIRA configuration
  Bit 51: - not used with SIRA configuration
  Bit 50: - not used with SIRA configuration
  Bit 49: - not used with SIRA configuration
  Bit 48: blower manually turned off
  Bit 47: - not used with SIRA configuration
  Bit 46: internal temperature/pressure sensor error
  Bit 45: ambient temperature/pressure sensor error
  Bit 44: - not used with SIRA configuration
  Bit 43: - not used with SIRA configuration
  Bit 42: - not used with SIRA configuration
  Bit 41: - not used with SIRA configuration
  Bit 40: - not used with SIRA configuration
  Bit 39: - not used with SIRA configuration
  Bit 38: - not used with SIRA configuration
  Bit 37: - not used with SIRA configuration
  Bit 36: - not used with SIRA configuration
  Bit 35: - not used with SIRA configuration
  Bit 34: clock backup battery LOW
  Bit 33: clock backup battery EMPTY
  Bit 32: - not used with SIRA configuration
  Bit 31: venturi / flow meter error
  Bit 30: - not used with SIRA configuration
  Bit 29: - not used with SIRA configuration
  Bit 28: - not used with SIRA configuration
  Bit 27: - not used with SIRA configuration
  Bit 26: - not used with SIRA configuration
  Bit 25: - not used with SIRA configuration
  Bit 24-0: reserved

************************************************************/



message Message {
  optional int64 timestamp = 1 [(unit) = TIMESTAMP]; // timestamp of message
  optional string text = 2; // log message text
  enum Type {
    INFO = 1;
    ERROR = 2;
  }
  optional Type type = 3; // log message type
}

message SystemInfo {
  optional string sw_version = 1; // Sampler software version
  optional uint32 pump_on_duration = 2 [(unit) = MINUTE]; // pumping time duration
  optional uint32 power_on_duration = 3 [(unit) = MINUTE]; // power on duration time
}

message CmdResult {
  enum Status {
    OK = 1; //success
    FAIL = 2; //fail
  }
  optional Status status = 1; // execution result
  repeated Message error_msg = 4; // error message(s) in case of unsuccessful command execution
}

message Response {
  optional ActionID action_id = 1;    // requested action ID
  optional CmdResult cmd_result = 2; // result of executed command
  optional DeviceStatus device_status = 3; // action id = SAMPLER_STATUS
  repeated Message messages = 4; // action id = LOG_MESSAGES
  optional SystemInfo sys_info = 5; // action id = SYS_INFO
  optional ProgramCmd program = 6; // action id = PROGRAM_CMD
  optional FlowCmd GetFlow = 7; // action ID = GET_INLET_HEATING
  optional InletHeatingCmd GetInletHeating = 8; // action ID = GET_INLET_HEATING
  optional FilterID GetFilterID = 9; // action ID = GET_FILTERID
}
